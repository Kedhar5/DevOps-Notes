Ansible:--
----------------------------------------------
Ansible is a opensource, Configuration management tool provided by Redhat 
Chef Puppet SaltStack are similar tools 

Configuration
--------------------
Any task which can be performed on servers is called configuration 
Ex: a) install/uninstall/update the packages 
    b) create the files or directories
	c) Start/stop the services 
	d) create/delete the users 

Ansible is a Python based tool 
We use SSH connection type from configuration managemnet tool to Host Machine 
We use YAML   Yet Another Markup Tool in Ansible 
Ansible is a push based Architecture 
Whatever configuartions are there in Ansible server can be pushed to Host Machine 

Ansible Architecture 
-------------------------
In host inventory we specify which host machines Ansible should connect tofrom ansible server 
default file name : Hosts
/etc/ansible/hosts is the directory 
yum install ansible -y 
Instead of default host inevntory name we can give custom name also 
Host inventory is both static and dynamic 
As a devops engineer we write ansible playlists. Which means a YAML file with series of instructions 

Core modules 
--------------
after installation of Ansible some default core modules will be present 
As per requirement we can write our custom modules, we need to write the module in python

Installation
--------------------
create 3 servers 
1 ansible and 2 host machines 
private IP's 
Ansible : 172.31.36.206
host 1 : 172.31.34.21
host 2 : 172.31.36.37 

connect to servers   
switch to root user   
create Ansible user   useradd ansible
set the pwd for ansible user   passwd ansible 
enable pswd auth   /etc/ssh/sshd_config
restart the sshd service   service sshd restart
provide sudo access visudo

user ansible 
pwd ansible

python --version 
sudo yum install python-pip
pip install ansible
in ansible user ansible --version 

Ansible is installed in ansible server 
From ansible server create SSH keys by using ansible user only 
ssh-keygen
copy SSH public key to host machines 
ssh-copy-id command is used here 
ssh-copy-id ansible@172.31.34.21
ssh-copy-id ansible@172.31.36.37

Now we keep host addresses in ansible server 
[ansible@ip-172-31-36-206 ~]$ cd /etc/
[ansible@ip-172-31-36-206 etc]$ sudo mkdir ansible
[sudo] password for ansible:
[ansible@ip-172-31-36-206 etc]$ cd ansible/
[ansible@ip-172-31-36-206 ansible]$ ls
[ansible@ip-172-31-36-206 ansible]$ pwd
/etc/ansible
[ansible@ip-172-31-36-206 ansible]$ sudo vi hosts

paste both the server Private Ip in the hosts file 

Now test the configuration connections using below command 
ansible all -m ping

/etc/ansible/hosts --> default 
/etc/ansible/flipkart --> cust Host inventory file 
ansible all -i /etc/ansible/flipkart -m ping 
ansible all --inventory-file /etc/ansible/flipkart -m ping

servers can be grouped as follows 
[webservers]
172.31.34.21

[appservers]
172.31.36.37

[DBserver]
172.31.36.37

Same server can be in multiple groups 
ansible DBserver -m ping
ansible appserver -m ping
ansible webserver -m ping

localhost can be added to hosts 
ssh-copy-id ansible@localhost
Then it also can be pinged 
ansible Ip -m ping is to ping a particular server 
ungrouped servers need to be placed at before all the headers in the hosts file 

if we mention all -m all the servers will be pinged which are present in the Hosts file 
to check the modules presnt by default : ansible-doc -l 
ansible-doc yum --> to get to know about a single module 
here yum is the module name 
docs.ansible.com the documentation will be present here 

ansible all -m ping -o is used to display the output in a single line 
ansible all -m shell -a "date" using this we can display date
by using the shell module as above we can use the Linux commands
ansible all -m shell -a "uptime" --> to display how long servers are up and running 
ansible all -m shell -a "df" or ansible all -m shell -a "df -h"

yum module
-----------------
ansible all -m yum -a "name=httpd" --> install httpd in all servers 
ansible all -b -m yum -a "name=httpd" --> -b means become 

service module
----------------
ansible all -b -m service -a "name=httpd state=started" --> start the service 
service sshd status --> to check the status 
ansible all -b -m yum -a "name=git" --> install git in all servers 

copy module 
-------------
ansible all -m copy -a "src=devops.txt dest=/tmp/devops.txt"
copy file to all the Hosts machines 

File module 
-----------------
ansible all -m file -a "path=/home/ansible/filemodule.txt state=touch"
This is to create a file similarly we can create soft link hard link directories etc 

setup module
---------------
we can get all the servers Host details 
ansible all -m setup

user module 
---------------
Create Kedhar user in all Host machines
ansible all -b -m user -a "name=Kedhar"
ls -l /home/ --> to view all the Users in the server 

YAML
---------------
Yet Another Markup Language 
Human friendly, Data serialization language 
It can support many languages 
key: value 
name: kedhar
age: 22

we can use true|yes false|no for boolean data type 
We can use string value float int for values 
we use use lists as follows 

devOpsTools:
 - git
 - gitHub 
 - Maven 
 - Tomcat
 or we can use as below 
devOpsTools: [git,maven,tomcat,ansible]

Playbook 
-------------
playbook is a Single YAML file which contain 1 or more YAML files 
Play is set of tasks which can be execued on host machines 
Task is action to perform on Host Machines
Sample playbook to ping servers 
------------------------------------

pingServers.yaml

---
- hosts: all
  tasks: 
  - name: Ping Servers
    ping: 
...

ansible-playbook --help 
ansible-playbook pingServers.yaml --list-hosts
playbook: pingServers.yaml

  play #1 (all): all    TAGS: []
    pattern: ['all']
    hosts (3):
      172.31.34.21
      172.31.36.37

ansible-playbook pingServers.yaml --list-tasks 
playbook: pingServers.yaml

  play #1 (all): all    TAGS: []
    pattern: ['all']
    hosts (3):
      172.31.34.21
      172.31.36.37
      localhost
[ansible@ip-172-31-36-206 ansiblePlaybboks]$ ansible-playbook pingServers.yaml --list-tasks

playbook: pingServers.yaml

  play #1 (all): all    TAGS: []
    tasks:
      Ping Servers      TAGS: []

ansible-playbook pingServers.yaml --step 
Perform task: TASK: Gathering Facts (N)o/(y)es/(c)ontinue: y
Perform task: TASK: Ping Servers (N)o/(y)es/(c)ontinue: y

Here gathering facts is to get the info of the servers but that can be disabled 
in .yaml file give gather_facts: no then run the --step command only the given task will run  

ansible-playbook pingServers.yaml --syntax-check 
playbook: pingServers.yaml

ansible-playbook pingServers.yaml --check 
ansible-playbook pingServers.yaml -v --> run the program in debug mode 
ansible-playbook pingServers.yaml -vv --> extension of above step 

ansible.cfg is the default config file 

Create a file 
----------------
C:\Users\kedha\Desktop\Ansible Playbooks\CreateFile.yaml
owner: parameter is as root when we execute playbook we got an error bc we are running from ansible user 
So we use "become: true" to get the sudo previleges
after this the file will be created in the mentioned path with the given permissions also 
in the state: parameter we can use the below options 
"absent"
"directory"
"file"
"hard"
"link"
"touch"

to access the variable we use {{variableName}} 
if we use template module instead of copy module it will replace the variable name with value
So when we access vars we need to use the template module 

[ansible@ip-172-31-36-206 ansiblePlaybboks]$ ansible-playbook installHttpVar.yaml -e company=nagella
This is how we pass a value dynamically to a html file 
we can alos use ansible-playbook installHttpVar.yaml --extra-vars company=nagella
ansible-playbook installHttpVar.yaml --extra-vars 'company=nagella contact=9999'

Group vars
--------------
sudo mkdir in /etc/ansible/group_vars
we can create group name yaml files 
in /etc/ansible/hosts we have all groups 

sudo vi /etc/ansible/group_vars/webservers.yaml 
sudo yum install java-11-amazon-corretto-devel

appservers.yaml 
sudo yum install java-1.8.0-amazon-corretto-devel

so we can install diff versions of java in different host machines as above
But here local host is not in any group so we need to create a file called all.yaml and we need to repeat the same process 

host variables
---------------------
host3 : 172.31.37.113
javaversion: java-11-amazon-corretto-devel


try this process for a new server
sudo mkdir /etc/ansible/host_vars 
copy the pem file to the home directory 
privateip.yaml 
mention the version of java we need along with the variable name in above file and run the Install java yaml playbook 

handlers
---------------
Handlers are special tasks which can run at the end of play when other task is notified
ex: install http server
	copy index.html
	start the http server 
	
Loops
-----------
general code to install a software
------------------------------------
---
- hosts: all
  become: true
  gather_facts: no
  tasks:
   - name: Install git
     yum:
      name: git
      state: present
   - name: Install vim
     yum:
      name: vim
      state: present
   - name: Install zip
     yum:
      name: zip
      state: present
   - name: Install unzip
     yum:
      name: unzip
      state: present
...

Code with a basic loop
-------------------------
---
- hosts: all
  become: true
  gather_facts: no
  tasks:
   - name: Install Softwares
     yum: 
      name: "{{item}}"

     with_items:
      - git
      - vim
      - zip
      - unzip
...

If we dont mention state it will take state: present 

When condition -- Yet to do the lab
-------------------
this is a cross distribution thing
we can do this for Amazon LInux Ubuntu etc

---
- hosts: all
  become: true
  gather_facts: no
  tasks:
   - name: Install HTTP server in Amazon Linux
     yum:
      name: httpd
     when: ansible_distribution == "Amazon"
   - name: Install HTTP server in Ubuntu
     apt:
      name: apache2
     when: ansible_distribution == "Ubuntu"
...

Tags 
-------------
In real time we can have n number of tags in a playbook 
Instead of running all tasks to run the specific task we use tags 
We need to mention a tag for each task We can use the tags argument 
Tag has to be written under the task name 
we can also have more than one tag name in a task 

ex: 
---
- hosts: all
  become: true
  gather_facts: no
  tasks:
  - name: install apache HTTP server
    tags: 
     - install
    yum:
     name: httpd
     state: present
  - name: copy index.html
    tags: 
     - copy
     - install
    template:
     src: index.html
     dest: /var/www/html/index.html
  - name: restart the HTTP server
    tags: 
     - restart
    service:
     name: httpd
     state: restarted
...

Syntax check
---------------
ansible-playbook tagsdemo.yaml --syntax-check
playbook: tagsdemo.yaml

view tags in a playbook 
------------------------------
[ansible@ip-172-31-36-206 ansiblePlaybooks]$ ansible-playbook tagsdemo.yaml --list-tags

playbook: tagsdemo.yaml

  play #1 (all): all    TAGS: []
      TASK TAGS: [copy, install, restart]
	  
Run some tags 
------------------
ansible-playbook tagsdemo.yaml --tags "tag1,tag2"

Skip some tags
------------------
ansible-playbook tagsdemo.yaml --skip-tags "tagname"

Roles
------------
Role is a directory which can be used in playbooks
[ansible@ip-172-31-36-206 ansiblePlaybooks]$ ansible-galaxy init httpserver
- Role httpserver was created successfully
Once we create a role a pre defined directory structure will be created 
Directories going to be created 
[ansible@ip-172-31-36-206 ansiblePlaybooks]$ cd httpserver/
[ansible@ip-172-31-36-206 httpserver]$ tree
.
├── README.md
├── defaults
│   └── main.yml
├── files
├── handlers
│   └── main.yml
├── meta
│   └── main.yml
├── tasks
│   └── main.yml
├── templates
├── tests
│   ├── inventory
│   └── test.yml
└── vars
    └── main.yml

We mention the variable in vars/main.yaml
   in handlers/main.yaml we ention the handlers 
   in tasks/main.yaml we mention all th tasks 
   in templates we can write the piece of code

Sample:
------------
---
- hosts: all
  become: true
  gather_facts: no
  roles:
   - httpserver
...

Ansible Vault
-------------------
PAt, SonarQube Token etc are secure data which needs to be stored securely 
So ansible is providing the Vault 
Hashicrop Vault
Hashicrop Packer
Hashicrop Terraform

ansible-vault is the command used here 
ansible-vault create filename
ansible-vault encrypt filename
ansible-vault decrypt filename
ansible-vault view filename 
ansible-vault edit filename 

[ansible@ip-172-31-36-206 group_vars]$ ansible-vault create all.yaml
New Vault password:
Confirm New Vault password:
ERROR! Unexpected Exception, this is probably a bug: [Errno 13] Permission denied: 'all.yaml'
to see the full traceback, use -vvv

sudo chmod 777 group_vars/
[ansible@ip-172-31-36-206 group_vars]$ ansible-vault create all.ya
New Vault password:
Confirm New Vault password:

ansible-all -m ping --ask-vault-pass --> if the password is stored in a ansible vault we can use this command to ping the server 
ansible-all -m ping --vault-paswword-file=filename.txt 

Dynamic Inventory
------------------------
It is a script, these scripts can be used to get all the Host machine Ip addresses/hostnames dynamically 
The inventory file is a YAML configuration file and must end with aws_ec2.{yml|yaml}. Example: dynamicInventory_aws_ec2.yaml
--------------------------------------------------------
plugin: aws_ec2

aws_access_key: AKIAXEKZFRVVWLNZ5K6Y
aws_secret_key: Qq4DmHHDDykE0Y5F8sQFmSQdWBrGFA5USnxmjqLJ

regions:
  - ap-south-1

filters:
  instance-state-name: running
 
keyed_groups:
  - key: tags.Name
    prefix: ""
	seperator: ""

hostnames:
  - private-ip-address
  
compose:
  ansible_hosts: private-ip-address
--------------------------------------------------------

aws_access_key & aws_secret_key --> IAM --> users --> create user 
then click on the user go to security tab and create the access key and paste it there 

dynamicInventory_aws_ec2.yaml
ansible-inventory graph -i dynamicInventory_aws_ec2.yaml

if the graph or any command doesnt work then we need to give the permission to thes users in users tab in IAM 

To avoid harcoding the keys 
create a role using IAM --> roles --> AWS --> EC2 --> AmzonEC2Readon --> create role 
Instances --> Assign role to the Ansible server 
Action --> security --> Modify IAM role --> select the creted role 
Then we can comment the Keys in Dynamic Inventory playbook and run the playbook

Ansible + Jenkins
---------------------
We need to have Ansible and Jenkins server 
We also need to have a Jenkins node
Java git should be present in ansible server 
using 8080 port number we can access Jenkins server 

Once the Jenkins server is ready we need to create a slave 
The slave node has to be in ansible server 
in ansible server ec2-user create a ansiblenode directory 
Then we need to go to Jenkins server and create a node in Manage jenkins --> nodes 
give the path and private IP and the path of ansible server 
Now the structure is created 

Go to GitHub --> Jenkins-with-ansible repository --> Inventory --> Then giv ethe host details there 
to run the playbook in jenkins 
------------------------------------
manage jenkins --> creds --> secret file --> give the pem file --> copy cred ID

environment need to be written before stages 

environment{
AWS_EC2PRIVATEKEY=credentials('copied creds ID')
}

stage{
steps{
sh "ansible-playbook -i githubStatiscHostLocation githubPlaybooklocation --private-key=$AWS_EC2PRIVATEKEY --ssh-common-args='-o StrictHostKeyChecking=no'"
}
}

jenkins - Ansible Dynamic Inventory
---------------------------------------
stage{
steps{
sh "ansible-playbook -i githubStatiscHostLocation githubPlaybooklocation --private-key=$AWS_EC2PRIVATEKEY --ssh-common-args='-o StrictHostKeyChecking=no'tomcatserver"
}
}

we have given tomcatserver so that tomcat will be installed in servers avaiable 

We can also create the servers dynamically 

Terraform 
-------------
it is a IaC tool --> infrastrucure as Code tool
CloudFormation ia other tool which supports only AWS 
.tf is the extensionfor terraform files 

ec2instancecreation.tf
----------------------------
provider "aws"{
region = "ap-south-1"
}

resource "aws_instance" "Instance Name"
{
ami = "amiID available in the Launch Instance"
instance_type = "t2.micro"
key_name = "pemFileName"
security_groups = ["securityGroupName"]
tags={
Name = "Instance Name"
}
}

count will determine the no.of instances that can be created 
If we dont mention count 1 server will be created 
create a job in jenkins 
In Github repo we have Dynamic Hosts Playbooks IaC code 

to execute the terraform script
---------------------------------
stage('ExecuteTerraformScript'){
steps{
sh "terraform -chdir=terrafromscriptDirectory init"
sh "terraform -chdir=terrafromscriptDirectory apply --auto-approve"
}
}

terraform needs to be installed on the node where the pipeline has to run
We need to also add AmasonEC2wite permission to make the job run or s=else we might get authorization error 
