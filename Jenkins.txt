Jenkins
---------------
GitHub --> Source code Manager
Maven --> build tool
Tomcat --> Application server 
SonarQube --> Source code quality management tool 
Nexus --> Artifactory repository 
Jenkins --> CI/CD tool 

Jenkins is a open source, Java based Continuous Integartion tool 
It is also called as HudSon
In 2011 a community was formed called Jenkins community and they built a tool called Jenkins 

It is built on Java but it supports many other languages 

CI --> Process of automating the build and run the unit test cases as soon as DEV push the code to source code management.
In CI there is no Deployment Process

CI benefits 
--------------------
Immediate Bug detection 
No Integration step in SDLC 
Deployable package at any point
We can record the evolution of the project

Continuous Delivery
---------------------
Here we need to manually trigger the deployment 
We are using this for External applications

Continuous Deployment
----------------------
All the environments are automated 
We are using this for Internal Applications

Using Jenkins we can Integrate version control system (GitHub, GitLab,BitBucket)
Can generate the test reports 
JaCoCo --> Java Code Coverage is a plugin used by Jenkins to do JUnit test cases 
This plugin can also stop the deployment 
If the Code coverage is <80% then Jenkins can stop deployment 
Push the builds to Artifactory repository 
can deploy directly to Prod or test 
Can notify to stake holders regarding success/failure of build 

Benefits of Jekins 
-----------------------
It is Open source 
Easy to install and minimal configurations 
Has over 1800+ plugins 
Built using so works on all major systems 
Good Documentation and easy for beginners 

jenkins is Community Edition 
CloudbeesJenkins is enterprise edition

Jenkins Installation
---------------------------
Java 11 is Pre requisite 
Min 2GB RAM is needed just to install Jenkins but we need to integrate so we need atleast 4GB RAM 

Jenkins Installation
--------------------
yum install jenkins 
then we need to enable jenkins service 
					systemctl enable jenkins --> to enable jenkins 
					systemctl start jenkins --> to start Jenkins 

to access jenkins http://publicIP:8080
username: kedhar
password: Kedhar@5

Since we have enabled Jenkins as a service even if we donot use the start command in root server just by starting the server we can access it 

How to can create a Job in Jenkins
-----------------------------------
To start the integration all the application servers need to be up and running 
jenkins SonarQube Tomcat Nexus need to be up 

We need to get the repo link from the dev and paste it in jenkins 
Then add the Build steps

When we configure maven with Jenkins and run the build and still it is failed 
Because Maven is not installed in Jenkins server it is able to fetch the details from github but not able do do the build 
Installation: Dashboard --> manage jenkins --> add maven tab this has to be done on web we need to install git in Linux server 
This is a single time setup
After this go back to the job and configure 
In build steps add maven version and save and build 
after this the build is successful we can check the status in console output 
package built is stored here 
Building war: /var/lib/jenkins/workspace/flipkart-dev/target/maven-web-application.war
/var/lib/jenkins --> jenkins home directory 

if we give sonar:sonar gole the report will be generated 
But we need to configure SonarQube details in pom.xml file we can modify the credentials in GitHub 

Jenkins Integration to GitHub, maven , sonarQube ,nexus , Tomcat
------------------------------------------------------------------
With GitHub install git in Linux server
Sudo yum install git 
* credentials are not mandatory for public repositories 
* After getting code from GitHub we need to build package 
Maven 
------
go to Job --> configure --> Invoke maven targets --> then we give the goals 
Since maven is not installed in Jenkins server build wont be successful 
maven installation:-- dashboard --> tools --> maven installation tab --> version 
go to our job --> select the maven version --> Build now --> package will be created 

SonarQube 
---------------
To build the sonar report we need to use sonar:sonar goal 
We need to update the sonar creds in pom.xml in sonar.host.url mention the url and in sonar.login mention the key 
Go to the job --> build now --> package will b ecreated successfully 

nexus 
----------
After the report creation we need to upload the war file to Artifactory repository 
to do this we se the deploy goal 
nexus installation:-- take the release and SNAPSHOT link from nexus repo and in pom.xml file in the distribution management tag attach them both 
then we need to configure nexus credentials in settings.xml file 
the following tag needs to be included in the settings.xml file 
<server>
      <id>nexus</id>
      <username>admin</username>
      <password>Kedhar@5</password>
    </server>

to find the settings.xml file we need to use the find command in jenkins server 
find / -name settings.xml 

In the servers tag upload the above tag and build now the artifact is successfully uploaded now 

Tomcat
------------------
After theat we need to deploy the application to Tomcat server
We need to use deploy to container plugin to do this
Installation:-- Dashboard --> manage jenkins --> plugins --> available plugins (deploy to container) --> install
Then we go to job and in configure --> Post build action tab --> deploy war/ear to container --> add tomcat URL username / pwd here and build now 
Even then it wont be succesful becuase fro kedhar user we have given admin-gui manager-gui roles
to deploy the application to tomcat server we need to give manager-script role also in the tomcat-users.xml file 
Now build now and the application is deployed successfully 

Instead of triggering manually we can automate the process using 1 of the 3 methods
1.pool SCM --> started by SCM change
2.Build periodically  --> started by timer 
3.GitHub Webhook
http://PublicIP:8080/github-webhook/ we need to add this in Github and we need to enable webhook url in Jenkins job

Instead of using public Ip we can PrivateIp since it is static in the source code
To access the web server we need to use private server 

We can keep only few builds and dicard the rest option is there in configure tab in the Job
For Junit report we can use JaCoCo plugin for this we need to instaal the plug in

Slack notification
-----------------------
Job name --> configure --> Slack tab --> add #channel-name --> Build now 
we can use this option so that instead of using the default channel 
Slack integration is a one time activity 

Jenkins Directory Structure 
------------------------------
/var/lib/jenkins is the Jenkins home directory 
In jenkins home directory we find config.xml ehich stores the info of the jenkins installed 

jobs 
---------
This directory has the details of the jobs we have created 
Create a ne job from existing one 
Job name --> configure --> New item --> job name and copy from details 

in lInux server in var/lib/jenkins/jobs directory 
	
	nextBuildNumber has the CurrentBuildNumber+1 value 
		if we have built the job 5 time it will be 6

	builds is other directory in the jobs 
		It has all the builds information
		It also has the list of builds if in Jenkins application we keep limit as 5 only 5 builds will be present
		It has change.xml file which shows the changes from the build to current one
		
	config.xml 
		This file has all the configurations of the job we are in 
		This file is different compared to config.xml in jenkins home directory which has jekins installation and management details 

Workspace 
----------------
This directory contains all the jobs source code 
What ever job we created it will create 2 directories
ex: flipkart-dev --> It has all the source code 
	flipkart-dev@tmp --> it is temp directory it deesnt have anything

plugins 
--------------
this directory has all the installed plugins details 

users
-------
this directory has all the users information 
users.xml 

logs 
------
keep the data logs 

secrets
------
keeps all the sensitive info 

tools 
--------
All the softwares what we installed using tools option will b present in this directory 

updates 
----------
any updates are available for installed plugins will be available here 

config.xml
-----------
<useSecurity> tag by default is true 
if we make it false it will not ask credentials for logging in to Jenkins 


maven based project
-----------------------
using maven project type instead of Freestyle Project because it will support only maven projects 
Using Freestyle project we can create jobs for any of the Jenkins supported languages 
But with Maven project type we can create only maven jobs
Maven project type has some extra features 
	Automatically it will select maven version unlike freestyle 
	There is also extra options like Run only if build is successful/failed/regardless 
	Also the performance is better compared to freestyle 

maven integration plugin is needed to build this kind of project 
then Dashboard --> Job name NEW ITEM --> ITEM name --> maven project 

Plug-in Management
------------------------
Deploy to Container --> deploy a project into Tomcat server 
Deploy Weblogic --> Deploy app to WebLogic server
Websphere deployer -->
Maven integration --> to create a maven project 
safe restart --> if we dont have access to linux server we use this plugin to restart Jenkins 
	http;//PublicIP:8080/safeRestart is used to restart Jenkins server 
	http;//PublicIP:8080/restart these two options can be used to restart the server 
	the difference between both paths is 2nd path restarts forcefully and 1st one will wait until all jobs will complete 
	If the user can see manage Jenkins option he has admin access or else he is not having access 
	Only user having admin access can access these URL's 
Next Build Number --> We can change the next build number rather than using the default one 
	this option will be available in Job level as set next build number or in the Dashboard 
	In case if a server is crashed and after maintenance if we want to continue from Prev build number we can use this plugin 
JaCoCo --> for Junit test case report 
SSH Agent --> 
Email extension --> For sending emails 
SonarQube scanner --> integrate sonarQube with jenkins 
	Audit trail --> find out the traces of activities done by users 
	This plugin details can be seen in jenkins configurations details page 
	manage jenkins --> system --> Audit trail --> add log(loggers) --> name(audittrail.log), Size of file in MB , log file count
	In Linux server var/lib/Jenkins --> We can find the content of the log file in this directory 
	New item --> name is run the shell script --> build steps (execute shell) give the shell commands there 
	even if u delete the job the log will be tracked 
Job configuration history --> restoring the job which is deleted 
	This option will be available in the Dashboard 
Schedule build --> Run a job at a particlar time for a single time 
	Schedule a build option will be available at the end of the job name in Dashboard 
	When we click on the calander symbol we can build the job at any particular time 
Blue Ocean --> Open blue ocean option will be available in dashboard 
	We can see the pipelines which we have built in blue ocean 
	If we want to create a job New Pipeline --> Choose the SCM --> Give the token and connect to the SCM 
	This plugin gives a new look to Jenkins and if we wish we can go back to classic model
Publish over SSH --> will be discussed in Docker 
ThinBackup --> will be discussed in Jenkins Backup
Build name setter --> Job --> configure --> Set Buildname --> give the custom name 
	After setting the name all the builds for that project will be done in the same format as given 
Convert to pipeline --> Whatever jobs we created if we want to convert them to pipeline we use this plugin 
Role based Authorization strategy --> Jenkins Security 

External Plugin installation 
---------------------------------
Plugins which we want to download from 3rd party websites 

Views 
----------
In realtime it is very difficult through all the jobs listed 
So we create a filter View --> new View (name) type(list view ) --> select the jobs and OK 
Only the list of that particular jobs will be given there 

Jenkins backup
----------------
if the configurations of any project are changed and if they want to be restored if backup is taken 
backup, ThinBackup etc are some of the plugins used to do this process 
ThinBackup plugin provides many features so it is widely used 
dashboard --> manage jenkins --> ThinBackup ( backup now, restore , settings ) these are the 3 tabs available 
create a directory in var/lib/jenkins and give the directory details / path in the server 
make sure to change the ownership details of the directory created to jenkins from root 
We can configure backups for all the jobs it cannot be done for a single job 
if we click on backup now a new directory will be created in var/lib/Jenkins/JenkinsBacakup directory 
if we want to create a zip file for old backups 
Dashboard -->manage jenkins --> Thinbackup --> settings -->  give the backup directory and select the options as per requirement and save it 
Instead of taking backup manually we can automate it by building the schedule for it 

Jenkins Security 
--------------------
Just like nexus SonarQube we can create users in Jenkins 
To avoid the misuse of the jekins server admin access we do this process 
Only DevOps admins should have admin access 
user names:--
DEV            DevOps
-------------------------
nagella-CRUD	charan
nath			teju
123 is the default password 
When we create the user 1st everyone will be having manage jenkins option so we created everyone with admin access 
manage jenkins--> Security --> 
Role bases Authorization strategy is the plugin needed to manage security and get role based strategy option in Authorization 
We can also provide Enable project-based security in Job level 
We can provide users Specific access to a particular project 

Jenkins migration
--------------------
when we want to move Jenkins from one server to other server we use this option 
version of Jenkins has to be same in new server to import the existing jobs in the current server 
Job import plugin has to be installed in the new server to import te jobs 
or else the Jenkins directory in var/lib directory can be directly copied to the new server 
After this we can restart the Jenkins server and use the service as usual 

Pipeline project 
--------------------
Pipeline script is needed to run the pipeline project 
Pipeline script can be written in scripted way and declarative way 
Using pipeline project we can integrate other jobs very easily unlike freestyle project 
This is just another way of creating the job 

new item --> project name --> pipeline project --> create 
node {

def mavenHome = tool name: 'maven 3.9.6'

stage('CheckOutCode'){
Git script here 
git credentialsId: '513be3cb-b777-4fa8-bcbe-e8c03e48719e', url: 'https://github.com/Kedhar5/maven-web-application.git'
}

stage('Build'){
sh "${mavenHome}/bin/mvn clean package"
}

stage('ExecuteSonarQube report){
sh "${mavenHome}/bin/mvn clean sonar:sonar"
}

stage('upload Artifact to Nexus'){
sh "${mavenHome}/bin/mvn clean deploy"
}

stage('Deploy App to Tomcat'){
sshagent(['690bec8e-d5a3-4479-b9e5-e9f4d67f49b2']){ --> This SSH agent has to be generated from the pipepline syntax
sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@privateIPof Tomcat Server:/opt/apache-tomcat/webapps/"
}
}

}

# we can use sh or bat here 

Whatever jenkins we use now is called master Jenkins or master instance 
If we donot specify the node name it will be master node 
Stagename can be anything and here we need to write script to get code from GitHub 
We need not code from scrach we can get from the pipeline steps 

Select Git and inputURL and branch give credentails and generate pipeline script 
Generated script can be pasted in stage CheckoutCode 

After we get the code we need to build the package in next stage 
just mvn clean package will not build a package so we need to point the directory details using a variable 
Maven should be installed in Jenkins server to run clean package 
we need to create a variable to access maven installed in global configs 
this line need to be written in node to run maven "def mavenHome = tool name: 'maven 3.9.6'"
version has to be mentioned exactly in tool name 
in var/lib.jenkins/tools the available maven version will be present 
we have created a variable and it points until maven3.9.6 but the mvn command is in bin directory so we use this "${mavenHome}/bin/mvn clean package"

Then we need to configure the sonarQube details in pom.xml file 
edit url and login details in pom.xml and add this line sh "${mavenHome}/bin/mvn clean sonar:sonar"
Since we used sonar:sonar goal and we configured the details we can get the sonarQube report 

After this we need to upload the artifact to artifact repository 
add this line in nexus stage "${mavenHome}/bin/mvn clean deploy"
then we need to configure the nexus details 
take both release and snapshot from nexus and configure them in pom.xml file 
also in conf directory in settings.xml file we need to configure nexus credentails and then build 

Then we need to deploy the application to Tomcat server 
since Tomcat is installed in a different server we need to use the scp command to copy war file to webapps directory 
we need to install SSH agent plugin here and in configure select SSH agent in job 
give username and take the .pem file as private key 
then use scp command to copy war file in Jenkins server in target directory to Tomcat server webapps directory 
use scp -o StrictHostKeyChecking=no so that it will not ask for authentication
When we build the job now it will fail because webapps directory has root as its owner and permissions are not given so give 777 permissions to webapps/
chmod -R 777 webapps/ 
or else we can use the deploy to container option and deploy the app directly 

Sample pipeline
-------------------------------------------------------------------------------------------------------------------------------------------------------
node {

def mavenHome = tool name: 'maven 3.9.6'

stage('CheckOutCode'){
git credentialsId: '513be3cb-b777-4fa8-bcbe-e8c03e48719e', url: 'https://github.com/Kedhar5/maven-web-application.git'
}

stage('Build'){
sh "${mavenHome}/bin/mvn clean package"
}

stage('ExecuteSonarQube report'){
sh "${mavenHome}/bin/mvn clean sonar:sonar"
}

stage('upload Artifact to Nexus'){
sh "${mavenHome}/bin/mvn clean deploy"
}

stage('Deploy App to Tomcat'){
sshagent(['690bec8e-d5a3-4479-b9e5-e9f4d67f49b2']){
sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@3.111.196.60:/opt/apache-tomcat-9.0.83/webapps"
}
}

}
-------------------------------------------------------------------------------------------------------------------------------------------------------

give the build properties to keep max no.of builds for that job 
then create the build but keep this script in node level not in stage level 
to print environment variables ex:-- echo "job name is ${env.JOB_NAME}"

node{
try{
stage('checkOutcode'){
//body
}

stage('build'){
//body 
}
}
catch(e){
currentBuild.result="FAILURE"
throw e 
}
finally{
sendSlackNotify(currentBuild.result)
}

}

def sendSlackNotify()
{
//body
}

Slack notification 
-----------------------
Send slack notification plugin is the pre requisite 
in try block give all the pipeline code 
in catch block give the error 
in finally block give the message 

// is a single line comment 
/* body 

*/ this is a multi line comment 

Sample slack notify 
--------------------
https://github.com/MithunTechnologiesDevOps/maven-web-application/blob/development/JenkinsfileOct2023batch
node {
    try {
        notifyBuild('STARTED')

        stage('Prepare code') {
            echo 'do checkout stuff'
        }

        stage('Testing') {
            echo 'Testing'
            echo 'Testing - publish coverage results'
        }

        stage('Staging') {
            echo 'Deploy Stage'
        }

        stage('Deploy') {
            echo 'Deploy - Backend'
            echo 'Deploy - Frontend'
        }

  } catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
  } finally {
    // Success or failure, always send notifications
    notifyBuild(currentBuild.result)
  }
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}

----------------------------------------------------------------------

declarative way of building a project 
-------------------------------------
instead of node here we use pipeline and we can directly use mvn 
But to use maven generate a declarative script 
For slack notification we can just use syntax generator and use post 


pipeline 
{
	agent any 
	tools {
     maven 'maven 3.9.6'
    }
	
	stages
	{
		stage('checkoutcode')
		{
		steps{
		git credentialsId: '513be3cb-b777-4fa8-bcbe-e8c03e48719e', url: 'https://github.com/Kedhar5/maven-web-application.git'
		}}
		stage('build')
		{
		steps{
		sh "mvn clean package"
		}}
		/*
		stage('SonarQube REport')
		{
		steps{
		sh"mvn clean sonar:sonar"
		}}
		stage('nexus Artifact repository')
		{
		steps{
		sh "mvn clean deploy"
		}}
		stage('deploy'){
		steps{
		sshagent(['690bec8e-d5a3-4479-b9e5-e9f4d67f49b2']){ --> This SSH agent has to be generated from the pipepline syntax
sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@privateIPof Tomcat Server:/opt/apache-tomcat/webapps/"

		}
		} */
	}
}

Multi branch Pipeline project 
--------------------------------------
Repos has n branches and we wanna perform CI process there we can use this process 
New item --> name --> multi branch pipeline --> give git repo URL and credentials --> script path 
The script has to be present in all the branches where we need to create the job 
If we have 4 branches and the script file is present in only one 3 branches themn only 3 jobs will be created 
Also only 3 branches will be continuously integrated 

Build with parameters
-----------------------
Option will be avaibale after pressing new item "this project is parameterized"
Choice parameter:-- to create a variable and give choices 
We can remove hardcoded branch name and mention ${parameter}

Build with parms in Pipleine
---------------------------------
pipeline 
{
	agent any 
	tools {
     maven 'maven 3.9.6'
    }
	
parameters {
  string defaultValue: 'kedhar', description: 'enter the person name', name: 'personName'
  choice choices: ['master', 'dev', 'uat', 'development'], description: 'enter branch name', name: 'branchName'
}
	
	stages
	{
		stage('checkoutcode')
		{
		steps{
		git branch: "${params.branchName}", credentialsId: '513be3cb-b777-4fa8-bcbe-e8c03e48719e', url: 'https://github.com/Kedhar5/maven-web-application.git'
		}}
		stage('build')
		{
		steps{
		sh "mvn clean package"
		}}
	}
}

to include the parameters we use syntax generator and use parameters there 
a snippet like this will be generated 
parameters {
  string defaultValue: 'kedhar', description: 'enter the person name', name: 'personName'
  choice choices: ['master', 'dev', 'uat', 'development'], description: 'enter branch name', name: 'branchName'
}
Add this in the pipeline before stage section and remove the hardcoding from the stages

Parallel
----------------
instead of executing stages 1 by 1 we can execute stages parallely


pipeline 
{
	agent any 
	
	tools {
     maven 'maven 3.9.6'
    }
	
parameters {
  string defaultValue: 'kedhar', description: 'enter the person name', name: 'personName'
  choice choices: ['master', 'dev', 'uat', 'development'], description: 'enter branch name', name: 'branchName'
}
	
		stages
	{
		stage('checkoutcode')
		{
		steps{
		git branch: "${params.branchName}", credentialsId: '513be3cb-b777-4fa8-bcbe-e8c03e48719e', url: 'https://github.com/Kedhar5/maven-web-application.git'
		}}
		
		stage('test and create package') {
  steps {
    parallel(
      Build: {
        sh "mvn clean test"
      },
      SonarQubeReportExecution: {
        sh "mvn clean package"
      }
    )
  }
}
	}
}

Trigger
--------------
trigger a job ob=nce the current job is executed successfully 
rhis will be available in Freestyle as an option 
For scripting we need to use the syntax genetaor and add the generated code at the end of job 
we can write a new stage
stage('trigger'){
steps{
build job: "triggerBScriptingWay"
}
}

master Slave Architecture 
-----------------------------
Rther than running all jobs in 1 server we create slaves and run the jobs in them 
We can also call them as nodes 
They can be created in Windows/Linux/Mac 
Server has to be different from the Master Server 
If we create slaves in same server then there is no use because there are no resources 
Master slave architecture is used to enhance the performance 
Without Java slaves are not going to run 
For Slaves 1GB RAM is enough but if we want to integrate we can use 4GB RAM 
Protocal is TCP/IP and Connection type is SSH for lInux 
Depanding on the server configs we can assign the job 
If we use same slave name fro all slaves it is advantageous as the bjob will identify the slave availability 
to create node
DashBoard --> Manage Jenkins --> nodes --> new node
Number of executors
1
Remote root directory
/home/ec2-user/flipkartnode/
Labels
nodes
Usage
Use this node as much as possible
Launch method
Launch agents via SSH
Host
172.31.2.187
Credentials
ec2-user (Jenkins Node creds)
Host Key Verification Strategy
Manually trusted key Verification Strategy
Require manual verification of initial connection
Advanced
Availability
Keep this agent online as much as possible

Now the node is ready to use Go To the job and select "restrict where this project can be run"
Mention th node name in Label expression 
When we give this workspace will be created in the directory which we have created 
Since git is not present in Slave instance the job wont run so we need to install git first then we can build the job 

In scripted way instead of using agent any wif we use following slave node will be used 
agent {
	
	    label 'flipkartnode'
	}

in scripted way in node('flipkartnode') node name has to be mentioned in node itself in scripted way 
If we change the no.of executors while we create a job then the number of jobs can be run parallaelly 
no.of executors depands on the server configurations 

Maven Java 						NodeJS
------------------				---------------------
mvn clean package 				npm install 
mvn sonar:sonar					npm run sonar
npm run sonar 					npm publish 
pom.xml 						package.json -->nexus
pom.xml 						sonar-project.js --> SonarQube
								.npmrc file for credentials 
nodeJs plug in need to be installed and then nodeJS configured in tools 
to generate the Authentication token for nexus to in .npmrc file 
[ec2-user@ip-172-31-2-79 ~]$ echo -n "admin:Kedhar@5" | openssl base64
YWRtaW46S2VkaGFyQDU=

node
{
    stage('checkoutCode')
    {
        git 'https://github.com/Kedhar5/nodejs-app.git'
    }
    stage('build')
    {
        nodejs(nodeJSInstallationName: 'NodeJS21.5.0'){
        sh "npm install"
        }
    }
    stage('sonarQube report')
    {
        nodejs(nodeJSInstallationName: 'NodeJS21.5.0'){
        sh "npm run sonar"
        }
    }
    /*
    stage('Nexus upload')
    {
        sh "npm publish"
    }
    */
    stage('run nodeJS')
    {
        sh "npm start"
    }
}

the application can be accessed at http://PublicIP:portNumberIn ConsoleOutput/ContextPathin app.js 

