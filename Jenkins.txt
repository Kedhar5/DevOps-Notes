Jenkins
---------------
GitHub --> Source code Manager
Maven --> build tool
Tomcat --> Application server 
SonarQube --> Source code quality management tool 
Nexus --> Artifactory repository 
Jenkins --> CI/CD tool 

Jenkins is a open source, Java based Continuous Integartion tool 
It is also called as HudSon
In 2011 a community was formed called Jenkins community and they built a tool called Jenkins 

It is built on Java but it supports many other languages 

CI --> Process of automating the build and run the unit test cases as soon as DEV push the code to source code management.
In CI there is no Deployment Process

CI benefits 
--------------------
Immediate Bug detection 
No Integration step in SDLC 
Deployable package at any point
We can record the evolution of the project

Continuous Delivery
---------------------
Here we need to manually trigger the deployment 
We are using this for External applications

Continuous Deployment
----------------------
All the environments are automated 
We are using this for Internal Applications

Using Jenkins we can Integrate version control system (GitHub, GitLab,BitBucket)
Can generate the test reports 
JaCoCo --> Java Code Coverage is a plugin used by Jenkins to do JUnit test cases 
This plugin can also stop the deployment 
If the Code coverage is <80% then Jenkins can stop deployment 
Push the builds to Artifactory repository 
can deploy directly to Prod or test 
Can notify to stake holders regarding success/failure of build 

Benefits of Jekins 
-----------------------
It is Open source 
Easy to install and minimal configurations 
Has over 1800+ plugins 
Built using so works on all major systems 
Good Documentation and easy for beginners 

jenkins is Community Edition 
CloudbeesJenkins is enterprise edition

Jenkins Installation
---------------------------
Java 11 is Pre requisite 
Min 2GB RAM is needed just to install Jenkins but we need to integrate so we need atleast 4GB RAM 

Jenkins Installation
--------------------
yum install jenkins 
then we need to enable jenkins service 
					systemctl enable jenkins --> to enable jenkins 
					systemctl start jenkins --> to start Jenkins 

to access jenkins http://publicIP:8080
username: kedhar
password: Kedhar@5

Since we have enabled Jenkins as a service even if we donot use the start command in root server just by starting the server we can access it 

How to can create a Job in Jenkins
-----------------------------------
To start the integration all the application servers need to be up and running 
jenkins SonarQube Tomcat Nexus need to be up 

We need to get the repo link from the dev and paste it in jenkins 
Then add the Build steps

When we configure maven with Jenkins and run the build and still it is failed 
Because Maven is not installed in Jenkins server it is able to fetch the details from github but not able do do the build 
Installation: Dashboard --> manage jenkins --> add maven tab this has to be done on web we need to install git in Linux server 
This is a single time setup
After this go back to the job and configure 
In build steps add maven version and save and build 
after this the build is successful we can check the status in console output 
package built is stored here 
Building war: /var/lib/jenkins/workspace/flipkart-dev/target/maven-web-application.war
/var/lib/jenkins --> jenkins home directory 

if we give sonar:sonar gole the report will be generated 
But we need to configure SonarQube details in pom.xml file we can modify the credentials in GitHub 

Jenkins Integration to GitHub, maven , sonarQube ,nexus , Tomcat
------------------------------------------------------------------
With GitHub install git in Linux server
Sudo yum install git 
* credentials are not mandatory for public repositories 
* After getting code from GitHub we need to build package 
Maven 
------
go to Job --> configure --> Invoke maven targets --> then we give the goals 
Since maven is not installed in Jenkins server build wont be successful 
maven installation:-- dashboard --> tools --> maven installation tab --> version 
go to our job --> select the maven version --> Build now --> package will be created 

SonarQube 
---------------
To build the sonar report we need to use sonar:sonar goal 
We need to update the sonar creds in pom.xml in sonar.host.url mention the url and in sonar.login mention the key 
Go to the job --> build now --> package will b ecreated successfully 

nexus 
----------
After the report creation we need to upload the war file to Artifactory repository 
to do this we se the deploy goal 
nexus installation:-- take the release and SNAPSHOT link from nexus repo and in pom.xml file in the distribution management tag attach them both 
then we need to configure nexus credentials in settings.xml file 
the following tag needs to be included in the settings.xml file 
<server>
      <id>nexus</id>
      <username>admin</username>
      <password>Kedhar@5</password>
    </server>

to find the settings.xml file we need to use the find command in jenkins server 
find / -name settings.xml 

In the servers tag upload the above tag and build now the artifact is successfully uploaded now 

Tomcat
------------------
After theat we need to deploy the application to Tomcat server
We need to use deploy to container plugin to do this
Installation:-- Dashboard --> manage jenkins --> plugins --> available plugins (deploy to container) --> install
Then we go to job and in configure --> Post build action tab --> deploy war/ear to container --> add tomcat URL username / pwd here and build now 
Even then it wont be succesful becuase fro kedhar user we have given admin-gui manager-gui roles
to deploy the application to tomcat server we need to give manager-script role also in the tomcat-users.xml file 
Now build now and the application is deployed successfully 

Instead of triggering manually we can automate the process using 1 of the 3 methods
1.pool SCM --> started by SCM change
2.Build periodically  --> started by timer 
3.GitHub Webhook
http://PublicIP:8080/github-webhook/ we need to add this in Github and we need to enable webhook url in Jenkins job

Instead of using public Ip we can PrivateIp since it is static in the source code
To access the web server we need to use private server 

We can keep only few builds and dicard the rest option is there in configure tab in the Job
For Junit report we can use JaCoCo plugin for this we need to instaal the plug in

Slack notification
-----------------------
Job name --> configure --> Slack tab --> add #channel-name --> Build now 
we can use this option so that instead of using the default channel 
Slack integration is a one time activity 

Jenkins Directory Structure 
------------------------------
/var/lib/jenkins is the Jenkins home directory 
In jenkins home directory we find config.xml ehich stores the info of the jenkins installed 
jobs 
---------
This directory has the details of the jobs we have created 
Create a ne job from existing one 
Job name --> configure --> New item --> job name and copy from details 

in lInux server in var/lib/jenkins/jobs directory 
	
	nextBuildNumber has the CurrentBuildNumber+1 value 
		if we have built the job 5 time it will be 6

	builds is other directory in the jobs 
		It has all the builds information
		It also has the list of builds if in Jenkins application we keep limit as 5 only 5 builds will be present
		It has change.xml file which shows the changes from the build to current one
		
	config.xml 
		This file has all the configurations of the job we are in 
		This file is different compared to config.xml in jenkins home directory which has jekins installation and management details 

Workspace 
----------------
This directory contains all the jobs source code 
What ever job we created it will create 2 directories
ex: flipkart-dev --> It has all the source code 
	flipkart-dev@tmp --> it is temp directory it deesnt have anything

plugins 
--------------
this directory has all the installed plugins details 

users
-------
this directory has all the users information 
users.xml 

logs 
------
keep the data logs 

secrets
------
keeps all the sensitive info 

tools 
--------
All the softwares what we installed using tools option will b present in this directory 

updates 
----------
any updates are available for installed plugins will be available here 

config.xml
-----------
<useSecurity> tag by default is true 
if we make it false it will not ask credentials for logging in to Jenkins 


maven based project
-----------------------
using maven project type instead of Freestyle Project because it will support only maven projects 
Using Freestyle project we can create jobs for any of the Jenkins supported languages 
But with Maven project type we can create only maven jobs
Maven project type has some extra features 
	Automatically it will select maven version unlike freestyle 
	There is also extra options like Run only if build is successful/failed/regardless 
	Also the performance is better compared to freestyle 

maven integration plugin is needed to build this kind of project 
then Dashboard --> Job name NEW ITEM --> ITEM name --> maven project 




